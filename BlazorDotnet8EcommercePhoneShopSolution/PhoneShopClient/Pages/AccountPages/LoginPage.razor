@page "/identity/account/login"
@implements IDisposable

<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <EditForm Enhance Model="User" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="card">
                    <div class="card-header">Энэхүү хэсэгийг бөглөж нэвтрэнэ үү</div>
                    <div class="card-body">
                        <div class="from-group mt-3">
                            <label class="form-label">И-МЭЙЛ</label>
                            <InputText @bind-Value="User.Email" class="form-control"></InputText>
                        </div>
                        <div class="from-group mt-3">
                            <label class="form-label">НУУЦ ҮГ</label>
                            <InputText @bind-Value="User.Password" class="form-control"></InputText>
                        </div>
                        <div class="from-group mt-3">
                            @if (messageDialogService.ShowSaveButton)
                            {
                                <button class="btn btn-outline-primary float-end" type="submit">НЭВТРЭХ</button>
                            }
                            <BusyButtonComponent ShowBusyButton="messageDialogService.ShowBusyButton"></BusyButtonComponent>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        messageDialogService.Action += StateHasChanged;
    }
    LoginDTO User = new();
    async Task HandleLogin()
    {
        var result = await accountService.Login(User);

        messageDialogService.ShowSaveButton = false;
        messageDialogService.ShowBusyButton = !messageDialogService.ShowSaveButton;

        if (result.Flag)
        {
            var customAuthStateProvider = (CustomAuthenticationstateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new TokenProp() { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);
        }

        

    }
    public void Dispose()
    {
        messageDialogService.Action -= StateHasChanged;
    }
}

