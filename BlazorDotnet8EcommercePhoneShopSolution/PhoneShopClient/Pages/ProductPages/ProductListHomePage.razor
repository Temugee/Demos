@page "/products"
@page "/products/{id:int}"
@page "/products/filter/{filter}"
@implements IDisposable
@if (ProductService.isVisible)
{
    <LoadingPage />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-2">
                <CategoriesPage CategoryClickedEvent="CategoryClickedEvent" DefaultCategoryClickedEvent="DefaultCategoryClickedEvent" />
            </div>
            <div class="col-lg-10">
                <BannerPage />
                <div class="card border-0">
                    <div class="card-header border-success-subtle mb-2"></div>
                    @if (ShowProductList)
                    {
                        <ProductListPage AllProducts="InternalProductList?? ProductService.ProductByCategory?? ProductService.AllProducts" HandleProductDetailsEvent="HandleProductDetailsEvent"/>
                    }
                    @if (ShowProductDetails)
                        {
                            <ProductDetails HandleBackClickedEvent="HandleBackClickedEvent" Product="ProductDetails"/>
                        }
                </div>
            </div>
            <div class="col-lg-12 mt-5">
                <div class="card border-0" style="position:absolute; left:1px;right:1px">
                    <div class="card-header border-danger-subtle">Recommended Products</div>
                    <RecommendedPage />
                </div>
            </div>
        </div>
    </div> 
}

@code {
    [Parameter] public int Id { get; set; } = 0;
    [Parameter] public string Filter { get; set; } = string.Empty;

    public bool ShowProductList { get; set; } = true;
    public bool ShowProductDetails { get; set; } = false;
    public Product ProductDetails { get; set; } = new();
    public List<Product> InternalProductList { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await LoadData();
        ProductService.ProductAction += StateHasChanged;
    }
    private async void CategoryClickedEvent(int categoryId)
    {
        if (categoryId == 0)
            return;
        InternalProductList?.Clear();
        await ProductService.GetProductsByCategory(categoryId);
    }
    async Task DefaultCategoryClickedEvent()
    {
        ProductService.ProductByCategory = null!;
        await LoadData();
    }
    async Task LoadData()
    {
        bool featured = false;
        await ProductService.GetAllProducts(featured);
        InternalProductList = ProductService.AllProducts;
    }
    void HandleBackClickedEvent()
    {
        ShowProductDetails = false;
        ShowProductList = true;
    }
    void HandleProductDetailsEvent(Product viewProduct)
    {
        ProductDetails = viewProduct;
        ShowProductDetails = true;
        ShowProductList = false;
    }
    protected override void OnParametersSet()
    {
        if (Id > 0)
        {
            ProductDetails = ProductService.AllProducts.FirstOrDefault(_ => _.Id == Id)!;
            ShowProductDetails = true;
            ShowProductList = false;
        }
        if (!string.IsNullOrEmpty(Filter) || !string.IsNullOrWhiteSpace(Filter))
        {
            InternalProductList = ProductService.AllProducts.Where(_ => _.Name!.Contains(Filter, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
    public void Dispose()
    {
        ProductService.ProductAction -= StateHasChanged;
    }
}


